1. 什么是reactor模式，什么是proactor模式，有什么区别？
Reactor模式，以事件驱动为核心，应用程序需要提供相应的事件接口并注册到Reactor上，如果相应的事件发生，Reactor将主动调用应用程序注册的接口，通过注册的接口完成具体的事件处理。
事件源:socket
事件反应器：Tcpserver
事件分离器：linux下就是poll，select，epoll, 负责等待事件发生，一旦某个事件发送，事件分离器就将该事件传递给该事件注册的对应的处理器，最后由处理器负责完成实际的读写工作
事件处理器：TcpConnection, Channel

好处：
Reactor模式是编写高性能网络服务器的必备技术之一，一些常用网络库如libevent、muduo等都是通过使用Reactor模式实现了网络库核心。它具有如下优点：

响应速度快，不必为单个同步事件所阻塞，虽然Reactor本身依然是需要同步的；——？
编程简单，可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销；
可扩展性强，可以很方便的通过增加Reactor实例个数来充分利用CPU资源；
可复用性强，Reactor模式本身与具体事件处理逻辑无关，具有很高的复用性。

2。线程池：初衷是尽量初始化阶段完成线程的创建，避免在运行时创建和销毁线程
(1). 禁止拷贝：锁，任务队列等资源不需要拷贝
(2). 使用互斥量+条件变量实现同步
(3). 
出现的问题：
1。线程池析构时没有等待线程的结束导致崩溃，需要发送退出信息并发送信号，等待结束后再析构
2。紧迫的任务需要临时创建线程

3。内存池：
4。日志打印模块
5。异常处理模块
6。线程同步用到了哪些